version: '3.8'

services:
  # Core development environment
  pixeltracker-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        PYTHON_VERSION: 3.9
        ALPINE_VERSION: 3.18
    image: pixeltracker:dev
    container_name: pixeltracker-dev
    volumes:
      - .:/app
      - pixeltracker-cache:/app/.cache
    environment:
      - PYTHONPATH=/app
      - PIXELTRACKER_ENV=development
      - PIXELTRACKER_LOG_LEVEL=DEBUG
    working_dir: /app
    command: /bin/bash
    stdin_open: true
    tty: true
    networks:
      - pixeltracker-net

  # Production-like environment
  pixeltracker-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: pixeltracker:prod
    container_name: pixeltracker-prod
    environment:
      - PYTHONPATH=/app
      - PIXELTRACKER_ENV=production
      - PIXELTRACKER_LOG_LEVEL=INFO
    networks:
      - pixeltracker-net
    restart: unless-stopped

  # Enterprise environment with ML capabilities
  pixeltracker-enterprise:
    build:
      context: .
      dockerfile: Dockerfile
      target: enterprise
    image: pixeltracker:enterprise
    container_name: pixeltracker-enterprise
    environment:
      - PYTHONPATH=/app
      - PIXELTRACKER_ENV=enterprise
      - PIXELTRACKER_LOG_LEVEL=INFO
    volumes:
      - pixeltracker-data:/app/data
    networks:
      - pixeltracker-net
    restart: unless-stopped

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: pixeltracker-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - pixeltracker-net
    restart: unless-stopped
    command: redis-server --appendonly yes

  # MongoDB for data storage
  mongodb:
    image: mongo:7
    container_name: pixeltracker-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=pixeltracker
    volumes:
      - mongodb-data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - pixeltracker-net
    restart: unless-stopped

  # Elasticsearch for search and analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: pixeltracker-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - pixeltracker-net
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: pixeltracker-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - pixeltracker-net
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: pixeltracker-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - pixeltracker-net
    restart: unless-stopped

  # Test runner service
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: pixeltracker:test
    container_name: pixeltracker-test
    volumes:
      - .:/app
      - test-cache:/app/.pytest_cache
    environment:
      - PYTHONPATH=/app
      - PIXELTRACKER_ENV=test
    working_dir: /app
    command: pytest tests/ -v --cov=pixeltracker --cov-report=html --cov-report=term-missing
    networks:
      - pixeltracker-net
    depends_on:
      - redis
      - mongodb

volumes:
  pixeltracker-cache:
  pixeltracker-data:
  test-cache:
  redis-data:
  mongodb-data:
  elasticsearch-data:
  prometheus-data:
  grafana-data:

networks:
  pixeltracker-net:
    driver: bridge
